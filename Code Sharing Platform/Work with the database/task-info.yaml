type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (!html.contains("hljs.initHighlightingOnLoad()")) {
                return CheckResult.wrong(
                    "Can't determine if code highlighting works or not.\n" +
                    "Use \"hljs.initHighlightingOnLoad()\" inside the script tags in the HTML page.");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            String snippet = SNIPPETS[id];

            HttpResponse resp = post(API_CODE_NEW, "{\"code\":\"" + snippet + "\"}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        try {
                            Integer.parseInt(i);
                        } catch (NumberFormatException ex) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/platform/vv/model/VVCode.java
  visible: true
  text: |+
    package platform.vv.model;

    import lombok.*;

    import javax.persistence.*;
    import java.time.LocalDateTime;

    @Getter
    @Setter
    @ToString
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder(toBuilder = true)
    @Entity
    public class VVCode {
        //mark id as primary key
        @Column
        @Id
        private Integer id;

        @Column
        private String content;

        @Column
        private LocalDateTime date;

    }

  learner_created: true
- name: src/platform/vv/controller/CodeSharingController.java
  visible: true
  text: |
    package platform.vv.controller;

    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.MediaType;
    import org.springframework.web.bind.annotation.*;
    import platform.vv.model.VVCode;
    import platform.vv.service.VVCodeService;

    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.time.Instant;
    import java.time.LocalDate;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.*;
    import java.util.stream.Collectors;

    @RestController
    @Slf4j
    public class CodeSharingController {

        @Autowired
        VVCodeService vvCodeService;

        @GetMapping(value = "/code", produces = MediaType.TEXT_HTML_VALUE)
        @ResponseBody
        public String getCodeHTMLPage() {
            log.error("getCodeHTMLPage");
            VVCode vvCode = getVvCode();

            return "<html>\n" + "<header> <title>Code</title>/header>\n" +
                    "<body>\n" + " <pre id=\"code_snippet\">\n" +
                    vvCode.getContent() +
                    "</pre>\n" + "<span id=\"load_date\">" + dateToString(vvCode.getDate()) + "</span></body>\n" + "</html>";
        }

        private VVCode getVvCode() {
            List<VVCode> list = vvCodeService.getAllVVCode();
            VVCode vvCode = null;
            if (list.size() == 0) {
                log.error("VV6 list empty");
                vvCode = new VVCode();
                vvCode.setContent("public static void main(String[] args) {}");
                vvCode.setDate(LocalDateTime.now());
            } else {
                log.error("VV6 list not empty");
                vvCode = list.get(list.size() - 1);
            }
            return vvCode;
        }

        @GetMapping(value = "/api/code", produces = MediaType.APPLICATION_JSON_VALUE)
        public Map<String, String> getCodeJSON() {
            log.error("getCodeJSON");
            VVCode vvCode = getVvCode();
            HashMap<String, String> map = new HashMap<>();
            map.put("code", vvCode.getContent());
            map.put("date", dateToString(vvCode.getDate()));
            return map;
        }

        @PostMapping(value = "/api/code/new", produces = MediaType.APPLICATION_JSON_VALUE)
        public Map<String, String> createNewCodeSnippet(@RequestBody Map<String, String> data) {
            log.error("createNewCodeSnippet");
            log.error(data.toString());
            VVCode vvCode = new VVCode();
            vvCode.setContent(data.get("code"));
            LocalDateTime dateTime = stringToDate(data.get("date"));
            vvCode.setDate(dateTime);
            vvCode = vvCodeService.saveOrUpdate(vvCode);
            HashMap<String, String> map = new HashMap<>();
            map.put("id", vvCode.getId().toString());
            return map;
        }

        private LocalDateTime stringToDate(String data) {
            if (data == null) {
                return LocalDateTime.now();
            }
            String str = data;
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
            LocalDateTime dateTime = LocalDateTime.parse(str, formatter);
            return dateTime;
        }

        private String dateToString(LocalDateTime data) {
            LocalDateTime date = data;
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
            String str = date.format(formatter);
            return str;
        }

        @GetMapping(value = "/code/new", produces = MediaType.TEXT_HTML_VALUE)
        @ResponseBody
        public String getCodeHTMLInputPage() {
            log.error("getCodeHTMLInputPage");
            return "<html>\n" + "<header> <title>Create</title><script>function send() {\n" +
                    "    let object = {\n" +
                    "        \"code\": document.getElementById(\"code_snippet\").value\n" +
                    "    };\n" +
                    "    \n" +
                    "    let json = JSON.stringify(object);\n" +
                    "    \n" +
                    "    let xhr = new XMLHttpRequest();\n" +
                    "    xhr.open(\"POST\", '/api/code/new', false)\n" +
                    "    xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n" +
                    "    xhr.send(json);\n" +
                    "    \n" +
                    "    if (xhr.status == 200) {\n" +
                    "      alert(\"Success!\");\n" +
                    "    }\n" +
                    "}</script>/header>\n" +
                    "<body>\n" + "<textarea id=\"code_snippet\"> ... </textarea>" +
                    "<button id=\"send_snippet\" type=\"submit\" onclick=\"send()\">Submit</button>\n" + "</html>";
        }

        @GetMapping(value = "/api/code/{vvcodeid}", produces = MediaType.APPLICATION_JSON_VALUE)
        public Map<String, String> getCodeJSONById(@PathVariable("vvcodeid") int vvcodeid) {
            log.error("getCodeJSONById: " + vvcodeid);
            VVCode vvCode = vvCodeService.getVVCode(vvcodeid);
            HashMap<String, String> map = new HashMap<>();
            map.put("code", vvCode.getContent());
            map.put("date", dateToString(vvCode.getDate()));
            return map;
        }

        @GetMapping(value = "/code/{vvcodeid}", produces = MediaType.TEXT_HTML_VALUE)
        @ResponseBody
        public String getCodeHTMLPageById(@PathVariable("vvcodeid") int vvcodeid) {
            log.error("getCodeHTMLPageById");
            VVCode vvCode = vvCodeService.getVVCode(vvcodeid);

            return "<html>\n" + "<header> <title>Code</title>/header>\n" +
                    "<body>\n" + " <pre id=\"code_snippet\">\n" +
                    vvCode.getContent() +
                    "</pre>\n" + "<span id=\"load_date\">" + dateToString(vvCode.getDate()) + "</span></body>\n" + "</html>";
        }

        @GetMapping(value = "/api/code/latest", produces = MediaType.APPLICATION_JSON_VALUE)
        public Map<String, String>[] getCodeJSONLatest() {
            log.error("getCodeJSONLatest");
            List<Map<String, String>> result = new ArrayList<>();
            vvCodeService.getAllVVCode().stream().sorted(Comparator.comparing(VVCode::getId).reversed()).limit(10).forEach(
                    vvCode -> {

                        HashMap<String, String> map = new HashMap<>();
                        map.put("code", vvCode.getContent());
                        map.put("date", dateToString(vvCode.getDate()));
                        result.add(map);
                    });
            return result.toArray(new Map[result.size()]);
        }

        @GetMapping(value = "/code/latest", produces = MediaType.TEXT_HTML_VALUE)
        @ResponseBody
        public String getCodeHTMLPageLatest() {
            log.error("getCodeHTMLPageLatest");
            List<String> result = new ArrayList<>();
            result.add("<html>\n" + "<header> <title>Latest</title>/header>\n" +
                    "<body>\n");
            vvCodeService.getAllVVCode().stream().sorted(Comparator.comparing(VVCode::getId).reversed()).limit(10).forEach(
                    vvCode -> {
                        result.add(" <pre id=\"code_snippet\">\n" +
                                vvCode.getContent() +
                                "</pre>\n" + "<span id=\"load_date\">" + dateToString(vvCode.getDate()) + "</span>");
                    });

            return result+ "</body>\n" + "</html>";
        }

    }
  learner_created: true
- name: src/platform/vv/service/VVCodeService.java
  visible: true
  text: |
    package platform.vv.service;

    import java.util.ArrayList;
    import java.util.List;

    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import platform.vv.model.VVCode;
    import platform.vv.repository.VVCodeRepository;

    @Service
    @Slf4j
    public class VVCodeService {

        @Autowired
        VVCodeRepository vvCodeRepository;

        public List<VVCode> getAllVVCode() {
            List<VVCode> vvCodeList = new ArrayList<>();
            vvCodeRepository.findAll().forEach(vvCodeList::add);
            return vvCodeList;
        }

        public VVCode saveOrUpdate(VVCode vvCode) {
    //        if(vvCode.getId()!=0 && this.getVVCode(vvCode.getId())!=null) {
    //            log.error("VV5 id to delete: " + vvCode.getId());
    //            this.delete(vvCode.getId());
    //        }
            if (vvCode.getId() == null) {
                int newId = generateNewIdCuzFuckingAutoIncrementFoulsUp();
                vvCode = vvCode.toBuilder().id(newId).build();
            }
            log.error("VV2 saveOrUpdate" + vvCode);
            vvCodeRepository.save(vvCode);
            return vvCode;
        }

        private int generateNewIdCuzFuckingAutoIncrementFoulsUp() {
            int newId = -1;
            List<VVCode> vvCodeList = new ArrayList<>();
            vvCodeRepository.findAll().forEach(vvCodeList::add);
            for (VVCode vvCode : vvCodeList) {
                if (vvCode.getId() > newId) {
                    newId = vvCode.getId();
                }
            }
            newId++;
            return newId;
        }

        public void delete(Integer id) {
            vvCodeRepository.deleteById(id);
        }

        public VVCode getVVCode(Integer id) {
            return vvCodeRepository.findById(id).orElseGet(null);
        }

    }
  learner_created: true
- name: src/platform/DataConfig.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.autoconfigure.domain.EntityScan;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
    @Configuration
    @ComponentScan({"platform.vv"})
    @EntityScan("platform.vv.model")
    @EnableJpaRepositories("platform.vv.repository")
    public class DataConfig {
    }
  learner_created: true
- name: src/platform/vv/repository/VVCodeRepository.java
  visible: true
  text: |+
    package platform.vv.repository;
    import org.springframework.data.repository.CrudRepository;
    import platform.vv.model.VVCode;

    public interface VVCodeRepository extends CrudRepository<VVCode, Integer>{
    }


  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11030#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 12 Mar 2022 00:36:00 UTC
record: 4
